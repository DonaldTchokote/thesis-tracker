// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  hashedPassword String
  image          String?
  accounts       Account[]
  sessions       Session[]
}

model Thesis {
  id              Int             @id @default(autoincrement())
  title           String          @db.VarChar(255)
  description     String          @db.Text
  status          Status          @default(OPEN)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  level           Level           @default(EMPTY)
  startDate       String?
  applicationDate String?
  submitionDate   String?
  //assignedToStudentId String?   @db.VarChar(255)
  //assignedToSudent    Student?  @relation(fields: [assignedToStudentId], references: [id])
  students        StudentThesis[]
}

model Student {
  id        String          @id @default(cuid())
  firstName String          @db.VarChar(50)
  lastName  String          @db.VarChar(50)
  matrikel  String          @db.VarChar(10)
  email     String?         @unique
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  thesis    StudentThesis[]
}

model StudentThesis {
  student   Student @relation(fields: [studentId], references: [id])
  studentId String
  thesis    Thesis  @relation(fields: [thesisId], references: [id])
  thesisId  Int

  @@id([studentId, thesisId])
}

enum Level {
  EMPTY
  P_PROJECT
  BACHELOR
  MASTER
}

enum Status {
  OPEN
  REGISTERED
  IN_PROGRESS
  SUBMITED
  DEFENDED
  CANCELLED
  CLOSED
}
